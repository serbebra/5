// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract ComplexEtherContract is Ownable, Pausable, ReentrancyGuard {
    uint256 private constant MAX_UINT256 = type(uint256).max;
    address private constant NULL_ADDRESS = address(0);

    mapping(address => bool) public whitelist;
    mapping(address => uint256) public balances;

    event WhitelistUpdated(address indexed account, bool isWhitelisted);
    event Deposit(address indexed sender, uint256 amount);
    event Withdrawal(address indexed recipient, uint256 amount);
    event Transfer(address indexed sender, address indexed recipient, uint256 amount);
    event ContractCreated(address indexed sender, address indexed contractAddress);

    modifier onlyWhitelisted() {
        require(whitelist[msg.sender], "Sender not whitelisted");
        _;
    }

    function updateWhitelist(address _account, bool _isWhitelisted) external onlyOwner {
        whitelist[_account] = _isWhitelisted;
        emit WhitelistUpdated(_account, _isWhitelisted);
    }

    function deposit() external payable whenNotPaused onlyWhitelisted {
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 _amount) external nonReentrant {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        balances[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
        emit Withdrawal(msg.sender, _amount);
    }

    function transfer(address _recipient, uint256 _amount) external nonReentrant onlyWhitelisted {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        balances[msg.sender] -= _amount;
        balances[_recipient] += _amount;
        emit Transfer(msg.sender, _recipient, _amount);
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    function createContract(bytes memory _contractCode) external nonReentrant onlyWhitelisted returns (address) {
        address deployedContract = _deployContract(_contractCode);
        emit ContractCreated(msg.sender, deployedContract);
        return deployedContract;
    }

    function _deployContract(bytes memory _contractCode) internal returns (address) {
        address deployedContract;
        assembly {
            deployedContract := create(0, add(_contractCode, 0x20), mload(_contractCode))
            if iszero(extcodesize(deployedContract)) {
                revert(0, 0)
            }
        }
        return deployedContract;
    }

    function emergencyWithdraw(uint256 _amount) external onlyOwner {
        payable(owner()).transfer(_amount);
    }

    receive() external payable {
        emit Deposit(msg.sender, msg.value);
    }
}
